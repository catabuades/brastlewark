(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else {
		var a = factory();
		for(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];
	}
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/*!************************************************!*\
  !*** ./src/Components/InfiniteAutocomplete.ts ***!
  \************************************************/
/***/ function(module, exports, __webpack_require__) {

	"use strict";
	var __assign = (this && this.__assign) || Object.assign || function(t) {
	    for (var s, i = 1, n = arguments.length; i < n; i++) {
	        s = arguments[i];
	        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
	            t[p] = s[p];
	    }
	    return t;
	};
	var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
	    return new (P || (P = Promise))(function (resolve, reject) {
	        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
	        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
	        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
	        step((generator = generator.apply(thisArg, _arguments || [])).next());
	    });
	};
	var __generator = (this && this.__generator) || function (thisArg, body) {
	    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t;
	    return { next: verb(0), "throw": verb(1), "return": verb(2) };
	    function verb(n) { return function (v) { return step([n, v]); }; }
	    function step(op) {
	        if (f) throw new TypeError("Generator is already executing.");
	        while (_) try {
	            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
	            if (y = 0, t) op = [0, t.value];
	            switch (op[0]) {
	                case 0: case 1: t = op; break;
	                case 4: _.label++; return { value: op[1], done: false };
	                case 5: _.label++; y = op[1]; op = [0]; continue;
	                case 7: op = _.ops.pop(); _.trys.pop(); continue;
	                default:
	                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
	                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
	                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
	                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
	                    if (t[2]) _.ops.pop();
	                    _.trys.pop(); continue;
	            }
	            op = body.call(thisArg, _);
	        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
	        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
	    }
	};
	var InputComponent_1 = __webpack_require__(/*! ./InputComponent */ 1);
	var OptionsComponent_1 = __webpack_require__(/*! ./OptionsComponent */ 2);
	var es6_promise_1 = __webpack_require__(/*! es6-promise */ 3);
	var index_1 = __webpack_require__(/*! ../Utils/index */ 6);
	var index_2 = __webpack_require__(/*! ../Constants/index */ 7);
	/**
	 * Default Input in infinite-autocomplete component
	 */
	exports.InputComponent = InputComponent_1.InputComponent;
	/**
	 * Default Input in infinite-autocomplete component
	 */
	exports.OptionsComponent = OptionsComponent_1.OptionsComponent;
	/**
	 * infinite-autocomplete component implementation
	 * @author Islam Attrash
	 */
	var InfiniteAutocomplete = (function () {
	    /**
	     * constructor for InfiniteAutocomplete class
	     * Enabling pluggable system linked with Interfaces only
	     * @param element - HTMLElement to append the infinite-autocomplete in it
	     * @param config - InfiniteAutocomplete config options
	     * @param optionComponent - Option component implementation to be injected (or default)
	     * @param inputComponent - Input component implementation to be injected (or default)
	     * @param optionsComponent - Options component implementation to be injected (or default)
	     */
	    function InfiniteAutocomplete(element, config) {
	        this.page = 1;
	        this.preventMoreRequests = false;
	        this.fetchingData = false;
	        /**
	         * Default configuration object
	         */
	        this.defaultConfig = {
	            fetchSize: 10,
	            maxHeight: '160px',
	            customizedInput: InputComponent_1.InputComponent,
	            customizedOptions: OptionsComponent_1.OptionsComponent
	        };
	        this.element = element;
	        this.config = __assign({}, this.defaultConfig, config);
	        this.inputComponent = new this.config.customizedInput();
	        this.optionsComponent = new this.config.customizedOptions();
	        this.init();
	    }
	    /**
	     * Initialize hook that get executed immediatly after using the infinite-autocomplete component
	     */
	    InfiniteAutocomplete.prototype.init = function () {
	        this.bindScope();
	        this.applyStylesRules();
	        this.appendInfiniteAutocompleteWrapperClass();
	        this.linkInputComponent();
	        this.linkOptionsComponent();
	        this.bindScrollReachBottomEvent();
	        this.bindEscapeEvent();
	        this.bindOutSideClickEvent();
	    };
	    /**
	     * Bind `this` scope for the Class methods
	     */
	    InfiniteAutocomplete.prototype.bindScope = function () {
	        this.onDocumentClickHandler = this.onDocumentClickHandler.bind(this);
	        this.onEscapeEventHandler = this.onEscapeEventHandler.bind(this);
	        this.onInputChange = this.onInputChange.bind(this);
	        this.scrollReachedBottomHandler = this.scrollReachedBottomHandler.bind(this);
	        this.onOptionClickEvent = this.onOptionClickEvent.bind(this);
	        this.onKeyPressed = this.onKeyPressed.bind(this);
	        this.onDocumentClickHandler = this.onDocumentClickHandler.bind(this);
	        this.onEscapeEventHandler = this.onEscapeEventHandler.bind(this);
	        this.onOptionHoverEvent = this.onOptionHoverEvent.bind(this);
	    };
	    /**
	     * (#1) Binds a click handler to detect where the user clicked
	     * If click is out side the main wrapper area then close options
	     */
	    InfiniteAutocomplete.prototype.bindOutSideClickEvent = function () {
	        document.addEventListener("click", this.onDocumentClickHandler);
	    };
	    /**
	     * on document click handler
	     * @param event - Event
	     */
	    InfiniteAutocomplete.prototype.onDocumentClickHandler = function (event) {
	        if (!this.isOptionsHidden()) {
	            var clickedOutSide = this.checkIfClickedOutSideTheAutocompleteComponents(event.target);
	            if (clickedOutSide) {
	                this.clearOptions();
	            }
	        }
	    };
	    /**
	     * Check if click is outside the plugin
	     * @param element - HTMLElement
	     */
	    InfiniteAutocomplete.prototype.checkIfClickedOutSideTheAutocompleteComponents = function (element) {
	        if (element === null) {
	            return true;
	        }
	        else if (element === this.element) {
	            return false;
	        }
	        else {
	            return this.checkIfClickedOutSideTheAutocompleteComponents(element.parentElement);
	        }
	    };
	    /**
	     * (#11) Binds escape event handler to clear the options when clicking Esc
	     */
	    InfiniteAutocomplete.prototype.bindEscapeEvent = function () {
	        document.addEventListener('keydown', this.onEscapeEventHandler);
	    };
	    /**
	     * Escape event handler
	     * @param e - KeyboardEvent
	     */
	    InfiniteAutocomplete.prototype.onEscapeEventHandler = function (e) {
	        if (e.keyCode === 27 && !this.isOptionsHidden()) {
	            this.clearOptions();
	        }
	    };
	    /**
	     * Append infinite autocomplete main wrapper className
	     */
	    InfiniteAutocomplete.prototype.appendInfiniteAutocompleteWrapperClass = function () {
	        if (!this.element.className || this.element.className.indexOf("infinite-autocomplete-wrapper") === -1) {
	            this.element.className = this.element
	                .className
	                .split(" ")
	                .concat(["infinite-autocomplete-wrapper"])
	                .filter(function (c) { return c; })
	                .join(" ");
	        }
	    };
	    /**
	     * Reset current page
	     */
	    InfiniteAutocomplete.prototype.resetCurrentPage = function () {
	        this.page = 1;
	    };
	    /**
	     * Link input component into the input wrapper
	     */
	    InfiniteAutocomplete.prototype.linkInputComponent = function () {
	        var MissingInputElementInInputComponentExceptionMsg = new Error("Customized input should contain input element <input />");
	        var inputWrapperEle = document.createElement("div");
	        inputWrapperEle.className = "infinite-autocomplete-input-wrapper";
	        inputWrapperEle.innerHTML = this.inputComponent.render();
	        var inputEle = inputWrapperEle.querySelector("input");
	        if (!inputEle) {
	            index_1.Utils.throwErrorInConsole(MissingInputElementInInputComponentExceptionMsg);
	            throw MissingInputElementInInputComponentExceptionMsg;
	        }
	        inputEle
	            .addEventListener("input", this.onInputChange);
	        //(#2) Start to show options when focus on the input
	        inputEle
	            .addEventListener("click", this.onInputChange);
	        inputEle
	            .addEventListener("keydown", this.onKeyPressed);
	        this.element.appendChild(inputWrapperEle);
	    };
	    /**
	     * On keydown pressing in input element
	     * @param keydownEvent - pressing key event
	     */
	    InfiniteAutocomplete.prototype.onKeyPressed = function (keydownEvent) {
	        if (!this.isOptionsHidden()) {
	            var currentHovered = this.getNavigationIndex();
	            if (currentHovered === -1) {
	                if (keydownEvent.keyCode === index_2.KEY_PRESS_STATES.DOWN) {
	                    this.toggleHoveredState(0, keydownEvent);
	                }
	            }
	            else {
	                switch (keydownEvent.keyCode) {
	                    case index_2.KEY_PRESS_STATES.DOWN:
	                        this.toggleHoveredState(currentHovered + 1, keydownEvent);
	                        break;
	                    case index_2.KEY_PRESS_STATES.UP:
	                        this.toggleHoveredState(currentHovered - 1, keydownEvent);
	                        break;
	                    case index_2.KEY_PRESS_STATES.ENTER:
	                        this.clickOnHovered();
	                        break;
	                }
	            }
	        }
	    };
	    /**
	     * Click on hovered element
	     */
	    InfiniteAutocomplete.prototype.clickOnHovered = function () {
	        var optionsList = this.getOptionsBaseElement();
	        var hoveredElement = optionsList.querySelector("." + index_2.HOVERED);
	        if (hoveredElement)
	            hoveredElement.click();
	    };
	    /**
	     * Simulate Scrolled to bottom
	     */
	    InfiniteAutocomplete.prototype.simulateScrollToBottom = function () {
	        var optionsList = this.getOptionsBaseElement();
	        var scrollEvent = new Event('scroll', { bubbles: true });
	        optionsList.scrollTop = 10000; // Simulate reached bottom
	        optionsList.dispatchEvent(scrollEvent);
	    };
	    /**
	     * Toggle hovered state on specific index in options list
	     * @param index - The index to be applied as hovered
	     */
	    InfiniteAutocomplete.prototype.toggleHoveredState = function (index, keydownEvent) {
	        var optionsList = this.getOptionsBaseElement();
	        if (index === optionsList.children.length) {
	            this.simulateScrollToBottom();
	        }
	        if (index >= 0 && index < optionsList.children.length) {
	            var hoveredElement = optionsList.querySelector("." + index_2.HOVERED);
	            if (hoveredElement) {
	                hoveredElement.className = hoveredElement
	                    .className
	                    .split(' ')
	                    .filter(function (e) { return e !== index_2.HOVERED; })
	                    .join(' ')
	                    .trim();
	            }
	            var targetElement = optionsList.children[index];
	            targetElement.className += " " + index_2.HOVERED;
	            // If hovered is not in the scrollable view
	            if (targetElement.offsetTop < optionsList.scrollTop || (targetElement.offsetTop - optionsList.scrollTop > optionsList.clientHeight)) {
	                switch (keydownEvent.keyCode) {
	                    case index_2.KEY_PRESS_STATES.UP:
	                        targetElement.scrollIntoView(true);
	                        break;
	                    case index_2.KEY_PRESS_STATES.DOWN:
	                        targetElement.scrollIntoView(false);
	                        break;
	                }
	            }
	        }
	    };
	    /**
	     * Get navigation index if options is open
	     * @returns Options current index
	     */
	    InfiniteAutocomplete.prototype.getNavigationIndex = function () {
	        var optionsList = this.getOptionsBaseElement();
	        for (var i = 0; i < optionsList.children.length; i++) {
	            var option = optionsList.children[i];
	            if (option.className.indexOf(index_2.HOVERED) !== -1) {
	                return i;
	            }
	        }
	        return -1;
	    };
	    /**
	     * Input component `change` event handler
	     * @param inputChangeEvent - Input change event handler
	     */
	    InfiniteAutocomplete.prototype.onInputChange = function (inputChangeEvent) {
	        var target = inputChangeEvent.currentTarget;
	        //If user pass special behavior for typing via configuration
	        if (this.inputComponent.onInputChange) {
	            this.inputComponent.onInputChange(target, target.value);
	        }
	        //If we type always fetch data and build options
	        //If we click on input and the options is hidden build the options
	        //If we click on input and the options is already opened don't do anything
	        if (inputChangeEvent.type === "input" ||
	            (inputChangeEvent.type === "click" && this.isOptionsHidden())) {
	            this.buildOptions(target.value, true);
	        }
	    };
	    /**
	     * Set the config object with extending
	     * @param config - infinite-autocomplete configuration object
	     */
	    InfiniteAutocomplete.prototype.setConfig = function (config) {
	        this.destroy();
	        this.config = __assign({}, this.config, config);
	        this.inputComponent = new this.config.customizedInput();
	        this.optionsComponent = new this.config.customizedOptions();
	        this.init();
	    };
	    /**
	     * Destroy the infinite-autocomplete and unbind all events
	     */
	    InfiniteAutocomplete.prototype.destroy = function () {
	        if (!this.isOptionsHidden()) {
	            this.clearOptions();
	        }
	        var optionsList = this.getOptionsBaseElement();
	        optionsList.removeEventListener("scroll", this.scrollReachedBottomHandler);
	        var inputEle = this.getInputElement();
	        inputEle.removeEventListener("input", this.onInputChange);
	        inputEle.removeEventListener("click", this.onInputChange);
	        inputEle.removeEventListener("keydown", this.onKeyPressed);
	        document.removeEventListener("click", this.onDocumentClickHandler);
	        document.removeEventListener('keydown', this.onEscapeEventHandler);
	        this.element.innerHTML = "";
	    };
	    /**
	     * Link options component into the infinite autocomplete component
	     */
	    InfiniteAutocomplete.prototype.linkOptionsComponent = function () {
	        var optionsWrapperEle = document.createElement("div");
	        optionsWrapperEle.className = "infinite-autocomplete-options-wrapper";
	        optionsWrapperEle.innerHTML = this.optionsComponent.render();
	        var optionsEle = optionsWrapperEle.querySelector(this.optionsComponent.listElementSelector);
	        this.setElementVisiblity(optionsWrapperEle, false);
	        optionsEle.style.overflow = "scroll";
	        optionsEle.style.overflowX = "hidden";
	        optionsEle.style.border = "1px solid #bcbcbc";
	        optionsEle.style.paddingBottom = "5px";
	        optionsEle.style.maxHeight = this.config.maxHeight || null;
	        this.element.appendChild(optionsWrapperEle);
	    };
	    /**
	     * Check if options wrapper hidden or not
	     * @returns true if hidden, or else false
	     */
	    InfiniteAutocomplete.prototype.isOptionsHidden = function () {
	        var optionsWrapper = this.element.querySelector(".infinite-autocomplete-options-wrapper");
	        return optionsWrapper.className
	            .indexOf("infinite-autocomplete-hidden-element") > -1;
	    };
	    /**
	     * Apply the style rules for the infinite autocomplete plugin and it's components
	     */
	    InfiniteAutocomplete.prototype.applyStylesRules = function () {
	        //Main wrapper style rules
	        var isMainWrapperStyleApplied = document.head.querySelector('#infinite-autocomplete-wrapper-style');
	        if (!isMainWrapperStyleApplied) {
	            var mainWrapperStyle = document.createElement('style');
	            mainWrapperStyle.id = 'infinite-autocomplete-wrapper-style';
	            mainWrapperStyle.innerHTML = "\n                .infinite-autocomplete-wrapper {\n                    position: relative;\n                }\n            ";
	            document.head.appendChild(mainWrapperStyle);
	        }
	        //Hidden element style rules
	        var isHiddenStyleApplied = document.head.querySelector('#infinite-autocomplete-hidden-style');
	        if (!isHiddenStyleApplied) {
	            var hiddenStyle = document.createElement('style');
	            hiddenStyle.id = 'infinite-autocomplete-hidden-style';
	            hiddenStyle.innerHTML = "\n                .infinite-autocomplete-hidden-element {\n                    visibility: hidden;\n                    z-index: -1;\n                }\n            ";
	            document.head.appendChild(hiddenStyle);
	        }
	        //Defaults style rules
	        var isDefaultsStyleApplied = document.head.querySelector('#infinite-autocomplete-defaults-style');
	        if (!isDefaultsStyleApplied) {
	            var defaultsStyle = document.createElement('style');
	            defaultsStyle.id = 'infinite-autocomplete-defaults-style';
	            defaultsStyle.innerHTML = "\n                .infinite-autocomplete-input-wrapper .infinite-autocomplete-default-input {\n                    height: 28px;\n                    border-radius: 8px;\n                    box-shadow: inset 0px 0px 15px -4px transparent;\n                }\n                .infinite-autocomplete-options-wrapper .infinite-autocomplete-default-options {\n                    list-style-type: none;\n                    margin-top: 0;\n                    padding-left: 0;\n                }\n                .infinite-autocomplete-options-wrapper .infinite-autocomplete-default-options li {\n                    padding: 5px 10px 10px 10px;\n                }\n                .infinite-autocomplete-options-wrapper .infinite-autocomplete-default-options li.hovered {\n                    background: #d5ebff;\n                    color: black;\n                    cursor: pointer;\n                }\n            ";
	            document.head.appendChild(defaultsStyle);
	        }
	        //Input style rules
	        var isInputStyleApplied = document.head.querySelector('#infinite-autocomplete-input-style');
	        if (!isInputStyleApplied) {
	            var inputStyle = document.createElement('style');
	            inputStyle.id = 'infinite-autocomplete-input-style';
	            inputStyle.innerHTML = "\n                .infinite-autocomplete-input-wrapper input {\n                    width: 100%;\n                }\n            ";
	            document.head.appendChild(inputStyle);
	        }
	        //Options style rules
	        var isOptionsStyleApplied = document.head.querySelector('#infinite-autocomplete-options-style');
	        if (!isOptionsStyleApplied) {
	            var optionsStyle = document.createElement('style');
	            optionsStyle.id = "infinite-autocomplete-options-style";
	            optionsStyle.innerHTML = "\n                .infinite-autocomplete-options-wrapper {\n                    position: absolute;\n                    z-index: 10;\n                    background: white;\n                }\n            ";
	            document.head.appendChild(optionsStyle);
	        }
	        //Scrollbar style rules
	        var isScrollbarStyleApplied = document.head.querySelector('#infinite-autocomplete-scrollbar-style');
	        if (!isScrollbarStyleApplied) {
	            var specialScroll = document.createElement('style');
	            specialScroll.id = 'infinite-autocomplete-scrollbar-style';
	            specialScroll.innerHTML = "\n                .infinite-autocomplete-wrapper ::-webkit-scrollbar {\n                        width: 4px;\n                    }\n                    \n                    .infinite-autocomplete-wrapper ::-webkit-scrollbar-track {\n                        -webkit-box-shadow: inset 0 0 6px rgba(0,0,0,0.3); \n                        -webkit-border-radius: 10px;\n                        border-radius: 10px;\n                    }\n                    \n                    .infinite-autocomplete-wrapper ::-webkit-scrollbar-thumb {\n                        -webkit-border-radius: 10px;\n                        border-radius: 10px;\n                        background: rgba(128, 128, 128, 0.8); \n                        -webkit-box-shadow: inset 0 0 6px rgba(0,0,0,0.5); \n                    }\n                    .infinite-autocomplete-wrapper ::-webkit-scrollbar-thumb:window-inactive {\n                        background: rgba(255,0,0,0.4); \n                    }\n            ";
	            document.head.appendChild(specialScroll);
	        }
	    };
	    /**
	     * Binds a scroll event handler on the options
	     */
	    InfiniteAutocomplete.prototype.bindScrollReachBottomEvent = function () {
	        var optionsEle = this.getOptionsBaseElement();
	        optionsEle.addEventListener("scroll", this.scrollReachedBottomHandler);
	    };
	    /**
	     * Scroll reached bottom handler
	     * @param e - Scroll event object
	     */
	    InfiniteAutocomplete.prototype.scrollReachedBottomHandler = function (e) {
	        var optionsEle = e.currentTarget;
	        if (!this.fetchingData && !this.preventMoreRequests && !this.isOptionsHidden()) {
	            if (optionsEle.scrollTop + optionsEle.clientHeight >= optionsEle.scrollHeight) {
	                this.page++;
	                this.buildOptions(this.getInputElement().value, false);
	            }
	        }
	    };
	    /**
	     * Clears the options list tag with removing the click event handlers
	     * unbind the `scroll` event from the options
	     * (Garbage collecting)
	     */
	    InfiniteAutocomplete.prototype.clearOptions = function () {
	        this.detachOptionEventHandlers(this.getOptionsBaseElement()
	            .querySelectorAll("[infinite-clickable]"));
	        this.resetCurrentPage();
	        this.preventMoreRequests = false;
	        var optionListElement = this.getOptionsBaseElement();
	        this.setElementVisiblity(this.element.querySelector(".infinite-autocomplete-options-wrapper"), false);
	        optionListElement.innerHTML = "";
	    };
	    /**
	     * Sets the element visiblity
	     * @param element - HTMLElement
	     * @param visible - visibility status
	     */
	    InfiniteAutocomplete.prototype.setElementVisiblity = function (element, visible) {
	        if (visible) {
	            element.className = element.className
	                .split(' ')
	                .filter(function (e) { return e !== "infinite-autocomplete-hidden-element"; })
	                .join(' ');
	        }
	        else {
	            if (element.className.indexOf("infinite-autocomplete-hidden-element") === -1) {
	                element.className += " infinite-autocomplete-hidden-element";
	            }
	        }
	    };
	    /**
	     * Get options base HTMLElement
	     * @returns HTMLElement
	     */
	    InfiniteAutocomplete.prototype.getOptionsBaseElement = function () {
	        var optionsWrapperExceptionMsg = new Error("Couldn't get the options base element.");
	        if (this.element) {
	            var optionsWrapper = this.element
	                .querySelector(".infinite-autocomplete-options-wrapper");
	            if (optionsWrapper) {
	                return optionsWrapper
	                    .querySelector(this.optionsComponent.listElementSelector);
	            }
	            else {
	                index_1.Utils.throwErrorInConsole(optionsWrapperExceptionMsg);
	                throw optionsWrapperExceptionMsg;
	            }
	        }
	        else {
	            index_1.Utils.throwErrorInConsole(optionsWrapperExceptionMsg);
	            throw optionsWrapperExceptionMsg;
	        }
	    };
	    /**
	     * Detaching the event handlers over the option elements
	     */
	    InfiniteAutocomplete.prototype.detachOptionEventHandlers = function (elements) {
	        for (var i = 0; i < elements.length; i++) {
	            elements[i].removeEventListener("click", this.onOptionClickEvent);
	            elements[i].removeEventListener("mouseover", this.onOptionHoverEvent);
	        }
	    };
	    /**
	     * Option click event handler
	     * @param clickEvent
	     */
	    InfiniteAutocomplete.prototype.onOptionClickEvent = function (clickEvent) {
	        if (this.config.onSelect) {
	            this.config.onSelect(clickEvent.currentTarget, clickEvent.currentTarget.data);
	        }
	        this.clearOptions();
	        this.setInput(clickEvent.currentTarget.data.text);
	    };
	    /**
	     * Get input HTML element below infinite-autocomplete-input-wrapper
	     * @returns HTMLInputElement
	     */
	    InfiniteAutocomplete.prototype.getInputElement = function () {
	        var inputElementExceptionMsg = new Error("Couldn't get the input element.");
	        if (this.element) {
	            var inputWrapper = this.element
	                .querySelector(".infinite-autocomplete-input-wrapper");
	            if (inputWrapper) {
	                return inputWrapper
	                    .querySelector("input");
	            }
	            else {
	                index_1.Utils.throwErrorInConsole(inputElementExceptionMsg);
	                throw inputElementExceptionMsg;
	            }
	        }
	        else {
	            index_1.Utils.throwErrorInConsole(inputElementExceptionMsg);
	            throw inputElementExceptionMsg;
	        }
	    };
	    /**
	     * Set input shown text
	     * @param text
	     */
	    InfiniteAutocomplete.prototype.setInput = function (text) {
	        this.getInputElement()
	            .value = text;
	    };
	    /**
	     * Get data based on text, page and fetchSize
	     * @param text
	     * @param page
	     * @param fetchSize
	     */
	    InfiniteAutocomplete.prototype.getData = function (text) {
	        return __awaiter(this, void 0, es6_promise_1.Promise, function () {
	            var dataSourceMissingExceptionMsg, from, to, apiData;
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        dataSourceMissingExceptionMsg = new Error("You must pass data or getDataFromApi function via config");
	                        if (!this.config.data) return [3 /*break*/, 1];
	                        this.fetchingData = true;
	                        from = (this.page - 1) * this.config.fetchSize;
	                        to = (this.config.fetchSize * (this.page - 1)) + this.config.fetchSize;
	                        this.fetchingData = false;
	                        return [2 /*return*/, this.config.data
	                                .filter(function (option) { return option.text.toLowerCase().indexOf(text.toLowerCase()) !== -1; })
	                                .slice(from, to)];
	                    case 1:
	                        if (!this.config.getDataFromApi) return [3 /*break*/, 3];
	                        this.fetchingData = true;
	                        return [4 /*yield*/, this.config.getDataFromApi(text, this.page, this.config.fetchSize)];
	                    case 2:
	                        apiData = _a.sent();
	                        this.fetchingData = false;
	                        return [2 /*return*/, apiData];
	                    case 3:
	                        index_1.Utils.throwErrorInConsole(dataSourceMissingExceptionMsg);
	                        throw dataSourceMissingExceptionMsg;
	                }
	            });
	        });
	    };
	    /**
	     * On hovering on option row
	     * @param event - Hover Mouse Event
	     */
	    InfiniteAutocomplete.prototype.onOptionHoverEvent = function (event) {
	        var optionsList = this.getOptionsBaseElement();
	        var hoveredElement = optionsList.querySelector("." + index_2.HOVERED);
	        if (hoveredElement) {
	            hoveredElement.className = hoveredElement
	                .className
	                .split(' ')
	                .filter(function (e) { return e !== index_2.HOVERED; })
	                .join(' ')
	                .trim();
	        }
	        var target = event.currentTarget;
	        target.className += " " + index_2.HOVERED;
	    };
	    /**
	     * Build the options inner tags in options list tag based on the text passed and the data in config
	     * @param text - Text to search on in the autocomplete
	     * @param clearPreviousData - Flag to clear previous options and override with the new one
	     */
	    InfiniteAutocomplete.prototype.buildOptions = function (text, clearPreviousData) {
	        if (clearPreviousData === void 0) { clearPreviousData = true; }
	        return __awaiter(this, void 0, es6_promise_1.Promise, function () {
	            var _this = this;
	            var fetchSizeExceptionMsg, optionListElement, filteredOptions, chunkClientHeight, maxHeightNumber, optionsWrapperEle, optionsEle;
	            return __generator(this, function (_a) {
	                switch (_a.label) {
	                    case 0:
	                        fetchSizeExceptionMsg = new Error("fetchSize must be overriden with correct numeric value");
	                        optionListElement = this.getOptionsBaseElement();
	                        if (clearPreviousData) {
	                            this.clearOptions();
	                        }
	                        if (!this.config.fetchSize) return [3 /*break*/, 2];
	                        return [4 /*yield*/, this.getData(text)];
	                    case 1:
	                        filteredOptions = _a.sent();
	                        if (filteredOptions.length < this.config.fetchSize) {
	                            //Stop fetching more chunks whenever you get less than the chunk fetch size
	                            this.preventMoreRequests = true;
	                        }
	                        filteredOptions
	                            .forEach(function (option) {
	                            var optionElementTemplate = _this.optionsComponent.renderOption(option);
	                            var tempElement = document.createElement("div");
	                            tempElement.innerHTML = optionElementTemplate;
	                            var optionElement = tempElement.childNodes[0];
	                            optionElement.data = { text: option.text, value: option.value };
	                            optionElement.setAttribute('infinite-clickable', '');
	                            optionElement.addEventListener("click", _this.onOptionClickEvent);
	                            optionElement.addEventListener("mouseover", _this.onOptionHoverEvent);
	                            optionListElement.appendChild(optionElement);
	                        });
	                        chunkClientHeight = optionListElement.children[0].clientHeight;
	                        //Check if maxHeight is fits the chunk size list
	                        if (this.config.maxHeight) {
	                            maxHeightNumber = parseInt(this.config.maxHeight);
	                            if (maxHeightNumber >= chunkClientHeight * this.config.fetchSize) {
	                                this.config.maxHeight = (chunkClientHeight * this.config.fetchSize - 5) + 'px';
	                                optionsWrapperEle = this.element.querySelector(".infinite-autocomplete-options-wrapper");
	                                optionsEle = optionsWrapperEle.querySelector(this.optionsComponent.listElementSelector);
	                                optionsEle.style.maxHeight = this.config.maxHeight;
	                            }
	                        }
	                        if (optionListElement.innerHTML !== "") {
	                            this.setElementVisiblity(this.element.querySelector(".infinite-autocomplete-options-wrapper"), true);
	                        }
	                        else {
	                            this.setElementVisiblity(this.element.querySelector(".infinite-autocomplete-options-wrapper"), false);
	                        }
	                        return [3 /*break*/, 3];
	                    case 2:
	                        index_1.Utils.throwErrorInConsole(fetchSizeExceptionMsg);
	                        throw fetchSizeExceptionMsg;
	                    case 3: return [2 /*return*/];
	                }
	            });
	        });
	    };
	    return InfiniteAutocomplete;
	}());
	exports.InfiniteAutocomplete = InfiniteAutocomplete;
	Object.defineProperty(exports, "__esModule", { value: true });
	exports.default = InfiniteAutocomplete;


/***/ },
/* 1 */
/*!******************************************!*\
  !*** ./src/Components/InputComponent.ts ***!
  \******************************************/
/***/ function(module, exports) {

	"use strict";
	/**
	 * Input component default implementation
	 * @author Islam Attrash
	 */
	var InputComponent = (function () {
	    function InputComponent() {
	    }
	    InputComponent.prototype.render = function () {
	        return "<input class=\"infinite-autocomplete-default-input\" type=\"text\" />";
	    };
	    return InputComponent;
	}());
	exports.InputComponent = InputComponent;


/***/ },
/* 2 */
/*!********************************************!*\
  !*** ./src/Components/OptionsComponent.ts ***!
  \********************************************/
/***/ function(module, exports) {

	"use strict";
	/**
	 * Options component default implementation
	 * @author Islam Attrash
	 */
	var OptionsComponent = (function () {
	    function OptionsComponent() {
	        this.listElementSelector = "ul";
	    }
	    OptionsComponent.prototype.render = function () {
	        //You can inject template code before
	        return "<" + this.listElementSelector + " class=\"infinite-autocomplete-default-options\"></" + this.listElementSelector + ">";
	        //You can inject template code after
	    };
	    OptionsComponent.prototype.renderOption = function (option) {
	        return "<li>\n                    " + option.text + "\n                </li>";
	    };
	    return OptionsComponent;
	}());
	exports.OptionsComponent = OptionsComponent;


/***/ },
/* 3 */
/*!*******************************************!*\
  !*** ./~/es6-promise/dist/es6-promise.js ***!
  \*******************************************/
/***/ function(module, exports, __webpack_require__) {

	var require;/* WEBPACK VAR INJECTION */(function(process, global) {/*!
	 * @overview es6-promise - a tiny implementation of Promises/A+.
	 * @copyright Copyright (c) 2014 Yehuda Katz, Tom Dale, Stefan Penner and contributors (Conversion to ES6 API by Jake Archibald)
	 * @license   Licensed under MIT license
	 *            See https://raw.githubusercontent.com/stefanpenner/es6-promise/master/LICENSE
	 * @version   4.0.5
	 */
	
	(function (global, factory) {
	     true ? module.exports = factory() :
	    typeof define === 'function' && define.amd ? define(factory) :
	    (global.ES6Promise = factory());
	}(this, (function () { 'use strict';
	
	function objectOrFunction(x) {
	  return typeof x === 'function' || typeof x === 'object' && x !== null;
	}
	
	function isFunction(x) {
	  return typeof x === 'function';
	}
	
	var _isArray = undefined;
	if (!Array.isArray) {
	  _isArray = function (x) {
	    return Object.prototype.toString.call(x) === '[object Array]';
	  };
	} else {
	  _isArray = Array.isArray;
	}
	
	var isArray = _isArray;
	
	var len = 0;
	var vertxNext = undefined;
	var customSchedulerFn = undefined;
	
	var asap = function asap(callback, arg) {
	  queue[len] = callback;
	  queue[len + 1] = arg;
	  len += 2;
	  if (len === 2) {
	    // If len is 2, that means that we need to schedule an async flush.
	    // If additional callbacks are queued before the queue is flushed, they
	    // will be processed by this flush that we are scheduling.
	    if (customSchedulerFn) {
	      customSchedulerFn(flush);
	    } else {
	      scheduleFlush();
	    }
	  }
	};
	
	function setScheduler(scheduleFn) {
	  customSchedulerFn = scheduleFn;
	}
	
	function setAsap(asapFn) {
	  asap = asapFn;
	}
	
	var browserWindow = typeof window !== 'undefined' ? window : undefined;
	var browserGlobal = browserWindow || {};
	var BrowserMutationObserver = browserGlobal.MutationObserver || browserGlobal.WebKitMutationObserver;
	var isNode = typeof self === 'undefined' && typeof process !== 'undefined' && ({}).toString.call(process) === '[object process]';
	
	// test for web worker but not in IE10
	var isWorker = typeof Uint8ClampedArray !== 'undefined' && typeof importScripts !== 'undefined' && typeof MessageChannel !== 'undefined';
	
	// node
	function useNextTick() {
	  // node version 0.10.x displays a deprecation warning when nextTick is used recursively
	  // see https://github.com/cujojs/when/issues/410 for details
	  return function () {
	    return process.nextTick(flush);
	  };
	}
	
	// vertx
	function useVertxTimer() {
	  if (typeof vertxNext !== 'undefined') {
	    return function () {
	      vertxNext(flush);
	    };
	  }
	
	  return useSetTimeout();
	}
	
	function useMutationObserver() {
	  var iterations = 0;
	  var observer = new BrowserMutationObserver(flush);
	  var node = document.createTextNode('');
	  observer.observe(node, { characterData: true });
	
	  return function () {
	    node.data = iterations = ++iterations % 2;
	  };
	}
	
	// web worker
	function useMessageChannel() {
	  var channel = new MessageChannel();
	  channel.port1.onmessage = flush;
	  return function () {
	    return channel.port2.postMessage(0);
	  };
	}
	
	function useSetTimeout() {
	  // Store setTimeout reference so es6-promise will be unaffected by
	  // other code modifying setTimeout (like sinon.useFakeTimers())
	  var globalSetTimeout = setTimeout;
	  return function () {
	    return globalSetTimeout(flush, 1);
	  };
	}
	
	var queue = new Array(1000);
	function flush() {
	  for (var i = 0; i < len; i += 2) {
	    var callback = queue[i];
	    var arg = queue[i + 1];
	
	    callback(arg);
	
	    queue[i] = undefined;
	    queue[i + 1] = undefined;
	  }
	
	  len = 0;
	}
	
	function attemptVertx() {
	  try {
	    var r = require;
	    var vertx = __webpack_require__(/*! vertx */ 5);
	    vertxNext = vertx.runOnLoop || vertx.runOnContext;
	    return useVertxTimer();
	  } catch (e) {
	    return useSetTimeout();
	  }
	}
	
	var scheduleFlush = undefined;
	// Decide what async method to use to triggering processing of queued callbacks:
	if (isNode) {
	  scheduleFlush = useNextTick();
	} else if (BrowserMutationObserver) {
	  scheduleFlush = useMutationObserver();
	} else if (isWorker) {
	  scheduleFlush = useMessageChannel();
	} else if (browserWindow === undefined && "function" === 'function') {
	  scheduleFlush = attemptVertx();
	} else {
	  scheduleFlush = useSetTimeout();
	}
	
	function then(onFulfillment, onRejection) {
	  var _arguments = arguments;
	
	  var parent = this;
	
	  var child = new this.constructor(noop);
	
	  if (child[PROMISE_ID] === undefined) {
	    makePromise(child);
	  }
	
	  var _state = parent._state;
	
	  if (_state) {
	    (function () {
	      var callback = _arguments[_state - 1];
	      asap(function () {
	        return invokeCallback(_state, child, callback, parent._result);
	      });
	    })();
	  } else {
	    subscribe(parent, child, onFulfillment, onRejection);
	  }
	
	  return child;
	}
	
	/**
	  `Promise.resolve` returns a promise that will become resolved with the
	  passed `value`. It is shorthand for the following:
	
	  ```javascript
	  let promise = new Promise(function(resolve, reject){
	    resolve(1);
	  });
	
	  promise.then(function(value){
	    // value === 1
	  });
	  ```
	
	  Instead of writing the above, your code now simply becomes the following:
	
	  ```javascript
	  let promise = Promise.resolve(1);
	
	  promise.then(function(value){
	    // value === 1
	  });
	  ```
	
	  @method resolve
	  @static
	  @param {Any} value value that the returned promise will be resolved with
	  Useful for tooling.
	  @return {Promise} a promise that will become fulfilled with the given
	  `value`
	*/
	function resolve(object) {
	  /*jshint validthis:true */
	  var Constructor = this;
	
	  if (object && typeof object === 'object' && object.constructor === Constructor) {
	    return object;
	  }
	
	  var promise = new Constructor(noop);
	  _resolve(promise, object);
	  return promise;
	}
	
	var PROMISE_ID = Math.random().toString(36).substring(16);
	
	function noop() {}
	
	var PENDING = void 0;
	var FULFILLED = 1;
	var REJECTED = 2;
	
	var GET_THEN_ERROR = new ErrorObject();
	
	function selfFulfillment() {
	  return new TypeError("You cannot resolve a promise with itself");
	}
	
	function cannotReturnOwn() {
	  return new TypeError('A promises callback cannot return that same promise.');
	}
	
	function getThen(promise) {
	  try {
	    return promise.then;
	  } catch (error) {
	    GET_THEN_ERROR.error = error;
	    return GET_THEN_ERROR;
	  }
	}
	
	function tryThen(then, value, fulfillmentHandler, rejectionHandler) {
	  try {
	    then.call(value, fulfillmentHandler, rejectionHandler);
	  } catch (e) {
	    return e;
	  }
	}
	
	function handleForeignThenable(promise, thenable, then) {
	  asap(function (promise) {
	    var sealed = false;
	    var error = tryThen(then, thenable, function (value) {
	      if (sealed) {
	        return;
	      }
	      sealed = true;
	      if (thenable !== value) {
	        _resolve(promise, value);
	      } else {
	        fulfill(promise, value);
	      }
	    }, function (reason) {
	      if (sealed) {
	        return;
	      }
	      sealed = true;
	
	      _reject(promise, reason);
	    }, 'Settle: ' + (promise._label || ' unknown promise'));
	
	    if (!sealed && error) {
	      sealed = true;
	      _reject(promise, error);
	    }
	  }, promise);
	}
	
	function handleOwnThenable(promise, thenable) {
	  if (thenable._state === FULFILLED) {
	    fulfill(promise, thenable._result);
	  } else if (thenable._state === REJECTED) {
	    _reject(promise, thenable._result);
	  } else {
	    subscribe(thenable, undefined, function (value) {
	      return _resolve(promise, value);
	    }, function (reason) {
	      return _reject(promise, reason);
	    });
	  }
	}
	
	function handleMaybeThenable(promise, maybeThenable, then$$) {
	  if (maybeThenable.constructor === promise.constructor && then$$ === then && maybeThenable.constructor.resolve === resolve) {
	    handleOwnThenable(promise, maybeThenable);
	  } else {
	    if (then$$ === GET_THEN_ERROR) {
	      _reject(promise, GET_THEN_ERROR.error);
	    } else if (then$$ === undefined) {
	      fulfill(promise, maybeThenable);
	    } else if (isFunction(then$$)) {
	      handleForeignThenable(promise, maybeThenable, then$$);
	    } else {
	      fulfill(promise, maybeThenable);
	    }
	  }
	}
	
	function _resolve(promise, value) {
	  if (promise === value) {
	    _reject(promise, selfFulfillment());
	  } else if (objectOrFunction(value)) {
	    handleMaybeThenable(promise, value, getThen(value));
	  } else {
	    fulfill(promise, value);
	  }
	}
	
	function publishRejection(promise) {
	  if (promise._onerror) {
	    promise._onerror(promise._result);
	  }
	
	  publish(promise);
	}
	
	function fulfill(promise, value) {
	  if (promise._state !== PENDING) {
	    return;
	  }
	
	  promise._result = value;
	  promise._state = FULFILLED;
	
	  if (promise._subscribers.length !== 0) {
	    asap(publish, promise);
	  }
	}
	
	function _reject(promise, reason) {
	  if (promise._state !== PENDING) {
	    return;
	  }
	  promise._state = REJECTED;
	  promise._result = reason;
	
	  asap(publishRejection, promise);
	}
	
	function subscribe(parent, child, onFulfillment, onRejection) {
	  var _subscribers = parent._subscribers;
	  var length = _subscribers.length;
	
	  parent._onerror = null;
	
	  _subscribers[length] = child;
	  _subscribers[length + FULFILLED] = onFulfillment;
	  _subscribers[length + REJECTED] = onRejection;
	
	  if (length === 0 && parent._state) {
	    asap(publish, parent);
	  }
	}
	
	function publish(promise) {
	  var subscribers = promise._subscribers;
	  var settled = promise._state;
	
	  if (subscribers.length === 0) {
	    return;
	  }
	
	  var child = undefined,
	      callback = undefined,
	      detail = promise._result;
	
	  for (var i = 0; i < subscribers.length; i += 3) {
	    child = subscribers[i];
	    callback = subscribers[i + settled];
	
	    if (child) {
	      invokeCallback(settled, child, callback, detail);
	    } else {
	      callback(detail);
	    }
	  }
	
	  promise._subscribers.length = 0;
	}
	
	function ErrorObject() {
	  this.error = null;
	}
	
	var TRY_CATCH_ERROR = new ErrorObject();
	
	function tryCatch(callback, detail) {
	  try {
	    return callback(detail);
	  } catch (e) {
	    TRY_CATCH_ERROR.error = e;
	    return TRY_CATCH_ERROR;
	  }
	}
	
	function invokeCallback(settled, promise, callback, detail) {
	  var hasCallback = isFunction(callback),
	      value = undefined,
	      error = undefined,
	      succeeded = undefined,
	      failed = undefined;
	
	  if (hasCallback) {
	    value = tryCatch(callback, detail);
	
	    if (value === TRY_CATCH_ERROR) {
	      failed = true;
	      error = value.error;
	      value = null;
	    } else {
	      succeeded = true;
	    }
	
	    if (promise === value) {
	      _reject(promise, cannotReturnOwn());
	      return;
	    }
	  } else {
	    value = detail;
	    succeeded = true;
	  }
	
	  if (promise._state !== PENDING) {
	    // noop
	  } else if (hasCallback && succeeded) {
	      _resolve(promise, value);
	    } else if (failed) {
	      _reject(promise, error);
	    } else if (settled === FULFILLED) {
	      fulfill(promise, value);
	    } else if (settled === REJECTED) {
	      _reject(promise, value);
	    }
	}
	
	function initializePromise(promise, resolver) {
	  try {
	    resolver(function resolvePromise(value) {
	      _resolve(promise, value);
	    }, function rejectPromise(reason) {
	      _reject(promise, reason);
	    });
	  } catch (e) {
	    _reject(promise, e);
	  }
	}
	
	var id = 0;
	function nextId() {
	  return id++;
	}
	
	function makePromise(promise) {
	  promise[PROMISE_ID] = id++;
	  promise._state = undefined;
	  promise._result = undefined;
	  promise._subscribers = [];
	}
	
	function Enumerator(Constructor, input) {
	  this._instanceConstructor = Constructor;
	  this.promise = new Constructor(noop);
	
	  if (!this.promise[PROMISE_ID]) {
	    makePromise(this.promise);
	  }
	
	  if (isArray(input)) {
	    this._input = input;
	    this.length = input.length;
	    this._remaining = input.length;
	
	    this._result = new Array(this.length);
	
	    if (this.length === 0) {
	      fulfill(this.promise, this._result);
	    } else {
	      this.length = this.length || 0;
	      this._enumerate();
	      if (this._remaining === 0) {
	        fulfill(this.promise, this._result);
	      }
	    }
	  } else {
	    _reject(this.promise, validationError());
	  }
	}
	
	function validationError() {
	  return new Error('Array Methods must be provided an Array');
	};
	
	Enumerator.prototype._enumerate = function () {
	  var length = this.length;
	  var _input = this._input;
	
	  for (var i = 0; this._state === PENDING && i < length; i++) {
	    this._eachEntry(_input[i], i);
	  }
	};
	
	Enumerator.prototype._eachEntry = function (entry, i) {
	  var c = this._instanceConstructor;
	  var resolve$$ = c.resolve;
	
	  if (resolve$$ === resolve) {
	    var _then = getThen(entry);
	
	    if (_then === then && entry._state !== PENDING) {
	      this._settledAt(entry._state, i, entry._result);
	    } else if (typeof _then !== 'function') {
	      this._remaining--;
	      this._result[i] = entry;
	    } else if (c === Promise) {
	      var promise = new c(noop);
	      handleMaybeThenable(promise, entry, _then);
	      this._willSettleAt(promise, i);
	    } else {
	      this._willSettleAt(new c(function (resolve$$) {
	        return resolve$$(entry);
	      }), i);
	    }
	  } else {
	    this._willSettleAt(resolve$$(entry), i);
	  }
	};
	
	Enumerator.prototype._settledAt = function (state, i, value) {
	  var promise = this.promise;
	
	  if (promise._state === PENDING) {
	    this._remaining--;
	
	    if (state === REJECTED) {
	      _reject(promise, value);
	    } else {
	      this._result[i] = value;
	    }
	  }
	
	  if (this._remaining === 0) {
	    fulfill(promise, this._result);
	  }
	};
	
	Enumerator.prototype._willSettleAt = function (promise, i) {
	  var enumerator = this;
	
	  subscribe(promise, undefined, function (value) {
	    return enumerator._settledAt(FULFILLED, i, value);
	  }, function (reason) {
	    return enumerator._settledAt(REJECTED, i, reason);
	  });
	};
	
	/**
	  `Promise.all` accepts an array of promises, and returns a new promise which
	  is fulfilled with an array of fulfillment values for the passed promises, or
	  rejected with the reason of the first passed promise to be rejected. It casts all
	  elements of the passed iterable to promises as it runs this algorithm.
	
	  Example:
	
	  ```javascript
	  let promise1 = resolve(1);
	  let promise2 = resolve(2);
	  let promise3 = resolve(3);
	  let promises = [ promise1, promise2, promise3 ];
	
	  Promise.all(promises).then(function(array){
	    // The array here would be [ 1, 2, 3 ];
	  });
	  ```
	
	  If any of the `promises` given to `all` are rejected, the first promise
	  that is rejected will be given as an argument to the returned promises's
	  rejection handler. For example:
	
	  Example:
	
	  ```javascript
	  let promise1 = resolve(1);
	  let promise2 = reject(new Error("2"));
	  let promise3 = reject(new Error("3"));
	  let promises = [ promise1, promise2, promise3 ];
	
	  Promise.all(promises).then(function(array){
	    // Code here never runs because there are rejected promises!
	  }, function(error) {
	    // error.message === "2"
	  });
	  ```
	
	  @method all
	  @static
	  @param {Array} entries array of promises
	  @param {String} label optional string for labeling the promise.
	  Useful for tooling.
	  @return {Promise} promise that is fulfilled when all `promises` have been
	  fulfilled, or rejected if any of them become rejected.
	  @static
	*/
	function all(entries) {
	  return new Enumerator(this, entries).promise;
	}
	
	/**
	  `Promise.race` returns a new promise which is settled in the same way as the
	  first passed promise to settle.
	
	  Example:
	
	  ```javascript
	  let promise1 = new Promise(function(resolve, reject){
	    setTimeout(function(){
	      resolve('promise 1');
	    }, 200);
	  });
	
	  let promise2 = new Promise(function(resolve, reject){
	    setTimeout(function(){
	      resolve('promise 2');
	    }, 100);
	  });
	
	  Promise.race([promise1, promise2]).then(function(result){
	    // result === 'promise 2' because it was resolved before promise1
	    // was resolved.
	  });
	  ```
	
	  `Promise.race` is deterministic in that only the state of the first
	  settled promise matters. For example, even if other promises given to the
	  `promises` array argument are resolved, but the first settled promise has
	  become rejected before the other promises became fulfilled, the returned
	  promise will become rejected:
	
	  ```javascript
	  let promise1 = new Promise(function(resolve, reject){
	    setTimeout(function(){
	      resolve('promise 1');
	    }, 200);
	  });
	
	  let promise2 = new Promise(function(resolve, reject){
	    setTimeout(function(){
	      reject(new Error('promise 2'));
	    }, 100);
	  });
	
	  Promise.race([promise1, promise2]).then(function(result){
	    // Code here never runs
	  }, function(reason){
	    // reason.message === 'promise 2' because promise 2 became rejected before
	    // promise 1 became fulfilled
	  });
	  ```
	
	  An example real-world use case is implementing timeouts:
	
	  ```javascript
	  Promise.race([ajax('foo.json'), timeout(5000)])
	  ```
	
	  @method race
	  @static
	  @param {Array} promises array of promises to observe
	  Useful for tooling.
	  @return {Promise} a promise which settles in the same way as the first passed
	  promise to settle.
	*/
	function race(entries) {
	  /*jshint validthis:true */
	  var Constructor = this;
	
	  if (!isArray(entries)) {
	    return new Constructor(function (_, reject) {
	      return reject(new TypeError('You must pass an array to race.'));
	    });
	  } else {
	    return new Constructor(function (resolve, reject) {
	      var length = entries.length;
	      for (var i = 0; i < length; i++) {
	        Constructor.resolve(entries[i]).then(resolve, reject);
	      }
	    });
	  }
	}
	
	/**
	  `Promise.reject` returns a promise rejected with the passed `reason`.
	  It is shorthand for the following:
	
	  ```javascript
	  let promise = new Promise(function(resolve, reject){
	    reject(new Error('WHOOPS'));
	  });
	
	  promise.then(function(value){
	    // Code here doesn't run because the promise is rejected!
	  }, function(reason){
	    // reason.message === 'WHOOPS'
	  });
	  ```
	
	  Instead of writing the above, your code now simply becomes the following:
	
	  ```javascript
	  let promise = Promise.reject(new Error('WHOOPS'));
	
	  promise.then(function(value){
	    // Code here doesn't run because the promise is rejected!
	  }, function(reason){
	    // reason.message === 'WHOOPS'
	  });
	  ```
	
	  @method reject
	  @static
	  @param {Any} reason value that the returned promise will be rejected with.
	  Useful for tooling.
	  @return {Promise} a promise rejected with the given `reason`.
	*/
	function reject(reason) {
	  /*jshint validthis:true */
	  var Constructor = this;
	  var promise = new Constructor(noop);
	  _reject(promise, reason);
	  return promise;
	}
	
	function needsResolver() {
	  throw new TypeError('You must pass a resolver function as the first argument to the promise constructor');
	}
	
	function needsNew() {
	  throw new TypeError("Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function.");
	}
	
	/**
	  Promise objects represent the eventual result of an asynchronous operation. The
	  primary way of interacting with a promise is through its `then` method, which
	  registers callbacks to receive either a promise's eventual value or the reason
	  why the promise cannot be fulfilled.
	
	  Terminology
	  -----------
	
	  - `promise` is an object or function with a `then` method whose behavior conforms to this specification.
	  - `thenable` is an object or function that defines a `then` method.
	  - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).
	  - `exception` is a value that is thrown using the throw statement.
	  - `reason` is a value that indicates why a promise was rejected.
	  - `settled` the final resting state of a promise, fulfilled or rejected.
	
	  A promise can be in one of three states: pending, fulfilled, or rejected.
	
	  Promises that are fulfilled have a fulfillment value and are in the fulfilled
	  state.  Promises that are rejected have a rejection reason and are in the
	  rejected state.  A fulfillment value is never a thenable.
	
	  Promises can also be said to *resolve* a value.  If this value is also a
	  promise, then the original promise's settled state will match the value's
	  settled state.  So a promise that *resolves* a promise that rejects will
	  itself reject, and a promise that *resolves* a promise that fulfills will
	  itself fulfill.
	
	
	  Basic Usage:
	  ------------
	
	  ```js
	  let promise = new Promise(function(resolve, reject) {
	    // on success
	    resolve(value);
	
	    // on failure
	    reject(reason);
	  });
	
	  promise.then(function(value) {
	    // on fulfillment
	  }, function(reason) {
	    // on rejection
	  });
	  ```
	
	  Advanced Usage:
	  ---------------
	
	  Promises shine when abstracting away asynchronous interactions such as
	  `XMLHttpRequest`s.
	
	  ```js
	  function getJSON(url) {
	    return new Promise(function(resolve, reject){
	      let xhr = new XMLHttpRequest();
	
	      xhr.open('GET', url);
	      xhr.onreadystatechange = handler;
	      xhr.responseType = 'json';
	      xhr.setRequestHeader('Accept', 'application/json');
	      xhr.send();
	
	      function handler() {
	        if (this.readyState === this.DONE) {
	          if (this.status === 200) {
	            resolve(this.response);
	          } else {
	            reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));
	          }
	        }
	      };
	    });
	  }
	
	  getJSON('/posts.json').then(function(json) {
	    // on fulfillment
	  }, function(reason) {
	    // on rejection
	  });
	  ```
	
	  Unlike callbacks, promises are great composable primitives.
	
	  ```js
	  Promise.all([
	    getJSON('/posts'),
	    getJSON('/comments')
	  ]).then(function(values){
	    values[0] // => postsJSON
	    values[1] // => commentsJSON
	
	    return values;
	  });
	  ```
	
	  @class Promise
	  @param {function} resolver
	  Useful for tooling.
	  @constructor
	*/
	function Promise(resolver) {
	  this[PROMISE_ID] = nextId();
	  this._result = this._state = undefined;
	  this._subscribers = [];
	
	  if (noop !== resolver) {
	    typeof resolver !== 'function' && needsResolver();
	    this instanceof Promise ? initializePromise(this, resolver) : needsNew();
	  }
	}
	
	Promise.all = all;
	Promise.race = race;
	Promise.resolve = resolve;
	Promise.reject = reject;
	Promise._setScheduler = setScheduler;
	Promise._setAsap = setAsap;
	Promise._asap = asap;
	
	Promise.prototype = {
	  constructor: Promise,
	
	  /**
	    The primary way of interacting with a promise is through its `then` method,
	    which registers callbacks to receive either a promise's eventual value or the
	    reason why the promise cannot be fulfilled.
	  
	    ```js
	    findUser().then(function(user){
	      // user is available
	    }, function(reason){
	      // user is unavailable, and you are given the reason why
	    });
	    ```
	  
	    Chaining
	    --------
	  
	    The return value of `then` is itself a promise.  This second, 'downstream'
	    promise is resolved with the return value of the first promise's fulfillment
	    or rejection handler, or rejected if the handler throws an exception.
	  
	    ```js
	    findUser().then(function (user) {
	      return user.name;
	    }, function (reason) {
	      return 'default name';
	    }).then(function (userName) {
	      // If `findUser` fulfilled, `userName` will be the user's name, otherwise it
	      // will be `'default name'`
	    });
	  
	    findUser().then(function (user) {
	      throw new Error('Found user, but still unhappy');
	    }, function (reason) {
	      throw new Error('`findUser` rejected and we're unhappy');
	    }).then(function (value) {
	      // never reached
	    }, function (reason) {
	      // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.
	      // If `findUser` rejected, `reason` will be '`findUser` rejected and we're unhappy'.
	    });
	    ```
	    If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.
	  
	    ```js
	    findUser().then(function (user) {
	      throw new PedagogicalException('Upstream error');
	    }).then(function (value) {
	      // never reached
	    }).then(function (value) {
	      // never reached
	    }, function (reason) {
	      // The `PedgagocialException` is propagated all the way down to here
	    });
	    ```
	  
	    Assimilation
	    ------------
	  
	    Sometimes the value you want to propagate to a downstream promise can only be
	    retrieved asynchronously. This can be achieved by returning a promise in the
	    fulfillment or rejection handler. The downstream promise will then be pending
	    until the returned promise is settled. This is called *assimilation*.
	  
	    ```js
	    findUser().then(function (user) {
	      return findCommentsByAuthor(user);
	    }).then(function (comments) {
	      // The user's comments are now available
	    });
	    ```
	  
	    If the assimliated promise rejects, then the downstream promise will also reject.
	  
	    ```js
	    findUser().then(function (user) {
	      return findCommentsByAuthor(user);
	    }).then(function (comments) {
	      // If `findCommentsByAuthor` fulfills, we'll have the value here
	    }, function (reason) {
	      // If `findCommentsByAuthor` rejects, we'll have the reason here
	    });
	    ```
	  
	    Simple Example
	    --------------
	  
	    Synchronous Example
	  
	    ```javascript
	    let result;
	  
	    try {
	      result = findResult();
	      // success
	    } catch(reason) {
	      // failure
	    }
	    ```
	  
	    Errback Example
	  
	    ```js
	    findResult(function(result, err){
	      if (err) {
	        // failure
	      } else {
	        // success
	      }
	    });
	    ```
	  
	    Promise Example;
	  
	    ```javascript
	    findResult().then(function(result){
	      // success
	    }, function(reason){
	      // failure
	    });
	    ```
	  
	    Advanced Example
	    --------------
	  
	    Synchronous Example
	  
	    ```javascript
	    let author, books;
	  
	    try {
	      author = findAuthor();
	      books  = findBooksByAuthor(author);
	      // success
	    } catch(reason) {
	      // failure
	    }
	    ```
	  
	    Errback Example
	  
	    ```js
	  
	    function foundBooks(books) {
	  
	    }
	  
	    function failure(reason) {
	  
	    }
	  
	    findAuthor(function(author, err){
	      if (err) {
	        failure(err);
	        // failure
	      } else {
	        try {
	          findBoooksByAuthor(author, function(books, err) {
	            if (err) {
	              failure(err);
	            } else {
	              try {
	                foundBooks(books);
	              } catch(reason) {
	                failure(reason);
	              }
	            }
	          });
	        } catch(error) {
	          failure(err);
	        }
	        // success
	      }
	    });
	    ```
	  
	    Promise Example;
	  
	    ```javascript
	    findAuthor().
	      then(findBooksByAuthor).
	      then(function(books){
	        // found books
	    }).catch(function(reason){
	      // something went wrong
	    });
	    ```
	  
	    @method then
	    @param {Function} onFulfilled
	    @param {Function} onRejected
	    Useful for tooling.
	    @return {Promise}
	  */
	  then: then,
	
	  /**
	    `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same
	    as the catch block of a try/catch statement.
	  
	    ```js
	    function findAuthor(){
	      throw new Error('couldn't find that author');
	    }
	  
	    // synchronous
	    try {
	      findAuthor();
	    } catch(reason) {
	      // something went wrong
	    }
	  
	    // async with promises
	    findAuthor().catch(function(reason){
	      // something went wrong
	    });
	    ```
	  
	    @method catch
	    @param {Function} onRejection
	    Useful for tooling.
	    @return {Promise}
	  */
	  'catch': function _catch(onRejection) {
	    return this.then(null, onRejection);
	  }
	};
	
	function polyfill() {
	    var local = undefined;
	
	    if (typeof global !== 'undefined') {
	        local = global;
	    } else if (typeof self !== 'undefined') {
	        local = self;
	    } else {
	        try {
	            local = Function('return this')();
	        } catch (e) {
	            throw new Error('polyfill failed because global object is unavailable in this environment');
	        }
	    }
	
	    var P = local.Promise;
	
	    if (P) {
	        var promiseToString = null;
	        try {
	            promiseToString = Object.prototype.toString.call(P.resolve());
	        } catch (e) {
	            // silently ignored
	        }
	
	        if (promiseToString === '[object Promise]' && !P.cast) {
	            return;
	        }
	    }
	
	    local.Promise = Promise;
	}
	
	// Strange compat..
	Promise.polyfill = polyfill;
	Promise.Promise = Promise;
	
	return Promise;
	
	})));
	//# sourceMappingURL=es6-promise.map
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./../../process/browser.js */ 4), (function() { return this; }())))

/***/ },
/* 4 */
/*!******************************!*\
  !*** ./~/process/browser.js ***!
  \******************************/
/***/ function(module, exports) {

	// shim for using process in browser
	var process = module.exports = {};
	
	// cached from whatever global is present so that test runners that stub it
	// don't break things.  But we need to wrap it in a try catch in case it is
	// wrapped in strict mode code which doesn't define any globals.  It's inside a
	// function because try/catches deoptimize in certain engines.
	
	var cachedSetTimeout;
	var cachedClearTimeout;
	
	function defaultSetTimout() {
	    throw new Error('setTimeout has not been defined');
	}
	function defaultClearTimeout () {
	    throw new Error('clearTimeout has not been defined');
	}
	(function () {
	    try {
	        if (typeof setTimeout === 'function') {
	            cachedSetTimeout = setTimeout;
	        } else {
	            cachedSetTimeout = defaultSetTimout;
	        }
	    } catch (e) {
	        cachedSetTimeout = defaultSetTimout;
	    }
	    try {
	        if (typeof clearTimeout === 'function') {
	            cachedClearTimeout = clearTimeout;
	        } else {
	            cachedClearTimeout = defaultClearTimeout;
	        }
	    } catch (e) {
	        cachedClearTimeout = defaultClearTimeout;
	    }
	} ())
	function runTimeout(fun) {
	    if (cachedSetTimeout === setTimeout) {
	        //normal enviroments in sane situations
	        return setTimeout(fun, 0);
	    }
	    // if setTimeout wasn't available but was latter defined
	    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
	        cachedSetTimeout = setTimeout;
	        return setTimeout(fun, 0);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedSetTimeout(fun, 0);
	    } catch(e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
	            return cachedSetTimeout.call(null, fun, 0);
	        } catch(e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
	            return cachedSetTimeout.call(this, fun, 0);
	        }
	    }
	
	
	}
	function runClearTimeout(marker) {
	    if (cachedClearTimeout === clearTimeout) {
	        //normal enviroments in sane situations
	        return clearTimeout(marker);
	    }
	    // if clearTimeout wasn't available but was latter defined
	    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
	        cachedClearTimeout = clearTimeout;
	        return clearTimeout(marker);
	    }
	    try {
	        // when when somebody has screwed with setTimeout but no I.E. maddness
	        return cachedClearTimeout(marker);
	    } catch (e){
	        try {
	            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
	            return cachedClearTimeout.call(null, marker);
	        } catch (e){
	            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
	            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
	            return cachedClearTimeout.call(this, marker);
	        }
	    }
	
	
	
	}
	var queue = [];
	var draining = false;
	var currentQueue;
	var queueIndex = -1;
	
	function cleanUpNextTick() {
	    if (!draining || !currentQueue) {
	        return;
	    }
	    draining = false;
	    if (currentQueue.length) {
	        queue = currentQueue.concat(queue);
	    } else {
	        queueIndex = -1;
	    }
	    if (queue.length) {
	        drainQueue();
	    }
	}
	
	function drainQueue() {
	    if (draining) {
	        return;
	    }
	    var timeout = runTimeout(cleanUpNextTick);
	    draining = true;
	
	    var len = queue.length;
	    while(len) {
	        currentQueue = queue;
	        queue = [];
	        while (++queueIndex < len) {
	            if (currentQueue) {
	                currentQueue[queueIndex].run();
	            }
	        }
	        queueIndex = -1;
	        len = queue.length;
	    }
	    currentQueue = null;
	    draining = false;
	    runClearTimeout(timeout);
	}
	
	process.nextTick = function (fun) {
	    var args = new Array(arguments.length - 1);
	    if (arguments.length > 1) {
	        for (var i = 1; i < arguments.length; i++) {
	            args[i - 1] = arguments[i];
	        }
	    }
	    queue.push(new Item(fun, args));
	    if (queue.length === 1 && !draining) {
	        runTimeout(drainQueue);
	    }
	};
	
	// v8 likes predictible objects
	function Item(fun, array) {
	    this.fun = fun;
	    this.array = array;
	}
	Item.prototype.run = function () {
	    this.fun.apply(null, this.array);
	};
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	process.version = ''; // empty string to avoid regexp issues
	process.versions = {};
	
	function noop() {}
	
	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;
	
	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};
	
	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};
	process.umask = function() { return 0; };


/***/ },
/* 5 */
/*!***********************!*\
  !*** vertx (ignored) ***!
  \***********************/
/***/ function(module, exports) {

	/* (ignored) */

/***/ },
/* 6 */
/*!****************************!*\
  !*** ./src/Utils/index.ts ***!
  \****************************/
/***/ function(module, exports) {

	"use strict";
	/**
	 * Utils Class
	 * @author Islam Attrash
	 */
	var Utils = (function () {
	    function Utils() {
	    }
	    /**
	     * Throw error message
	     * @param error - Error message
	     */
	    Utils.throwErrorInConsole = function (error) {
	        console.error(error);
	    };
	    return Utils;
	}());
	exports.Utils = Utils;


/***/ },
/* 7 */
/*!********************************!*\
  !*** ./src/Constants/index.ts ***!
  \********************************/
/***/ function(module, exports) {

	"use strict";
	/** Hovered state when navigation through upArrow/downArrow while options is open */
	exports.HOVERED = 'hovered';
	/**
	 * Key down states (keyCodes)
	 */
	exports.KEY_PRESS_STATES = {
	    UP: 38,
	    DOWN: 40,
	    ENTER: 13
	};


/***/ }
/******/ ])
});
;
//# sourceMappingURL=index.debug.js.map